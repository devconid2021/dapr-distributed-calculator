name: dapr-distributed-calculator
on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
           ┌───────────── minute (0 - 59)
           │  ┌───────────── hour (0 - 23)
           │  │ ┌───────────── day of the month (1 - 31)
           │  │ │ ┌───────────── month (1 - 12 or JAN-DEC)
           │  │ │ │ ┌───────────── day of the week (0 - 6 or SUN-SAT)
           │  │ │ │ │
           │  │ │ │ │
           │  │ │ │ │
           *  * * * *
    - cron: '30 1 * * 0'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

  scan:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v1

      - name: Autobuild
        uses: github/codeql-action/autobuild@v1
      
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v1

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ secrets.ACRNAME }}
          path: /home/runner/work/dapr-distributed-calculator/results/python-builtin.sarif 

  uploadscan:
    needs: scan
    runs-on: ubuntu-latest
    steps:  
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@master
        with:
          name: ${{ secrets.ACRNAME }}
          path: /home/runner/work/dapr-distributed-calculator/results/python-builtin.sarif 

      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: /home/runner/work/dapr-distributed-calculator/results/python-builtin.sarif

  build:
    needs: uploadscan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@main

      - name: Build docker image
        run: | 
          REGISTRY=${{ env.ACRSERVER }} make build

      # container scan
      # https://github.com/Azure/container-scan
      - uses: Azure/container-scan@v0
        name: Docker image scan
        with:
          image-name: ${{ env.ACRSERVER }}/devconid2021/distributed-calculator-python:edge

      # container vulnerability scan
      # https://github.com/aquasecurity/trivy-action
      - name: Docker image Trivy vulnerability scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.ACRSERVER }}/devconid2021/distributed-calculator-python:edge'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'python-trivy.sarif'

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ${{ secrets.ACRNAME }}
          path: /home/runner/work/dapr-distributed-calculator/python-trivy.sarif 

      - name: Upload scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: /home/runner/work/dapr-distributed-calculator/python-trivy.sarif

      - name: Docker login
        uses: azure/docker-login@v1
        with:
          login-server: ${{ env.ACRSERVER }}
          username: ${{ secrets.ACRID }}
          password: ${{ secrets.ACRSECRET }} 
      - name: Push docker image
        if: github.event_name != 'pull_request'
        run: |
          REGISTRY=${{ env.ACRSERVER }} make push
    env:
      ACRSERVER: ${{ secrets.ACRNAME }}.azurecr.io
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@main
      - name: Get AKS context
        uses: azure/aks-set-context@v1
        with:
          creds: '${{ secrets.AZCREDENTIALS }}'
          cluster-name: ${{ secrets.AKSNAME }}
          resource-group: ${{ secrets.AKSRG }}
        id: login    
      
      # Create namespace if doesn't exist
      # - run: |
      #     kubectl create namespace ${{ env.NAMESPACE }} --dry-run -o json | kubectl apply -f -
      
      # Create image pull secret for ACR
      - name: Pull ACR image
        uses: azure/k8s-create-secret@v1
        with:
          container-registry-url: ${{ env.ACRSERVER }}
          container-registry-username: ${{ secrets.ACRNAME }}
          container-registry-password: ${{ secrets.ACRSECRET }}
          secret-name: ${{ env.SECRET }}
          # namespace: ${{ env.NAMESPACE }}
          # force: true
      
      # Deploy app to AKS
      - name: Deploy to AKS
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            deploy/dotnet-subtractor.yaml
            deploy/go-adder.yaml
            deploy/node-divider.yaml
            deploy/python-multiplier.yaml
            deploy/react-calculator.yaml
            deploy/misc/azurekeyvault.yaml
            deploy/misc/redis.yaml
          images: |
            ${{ env.ACRSERVER }}:${{ github.sha }}
          imagepullsecrets: |
            ${{ env.SECRET }}
          # namespace: ${{ env.NAMESPACE }}
    env:
      ACRSERVER: ${{ secrets.ACRNAME }}.azurecr.io
      SECRET: ${{ secrets.ACRNAME }}
      # NAMESPACE: ${{ secrets.ACRNAME }}

  post-deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2